@use 'sass:math';

@function get-side($val, $side) {
  $length: length($val);

  @if $length == 1 {
    @return $val;
  }
  @if $length == 2 {
    @return map-get((
      top: nth($val, 1),
      bottom: nth($val, 1),
      left: nth($val, 2),
      right: nth($val, 2),
    ), $side);
  }
  @if $length == 3 {
    @return map-get((
      top: nth($val, 1),
      left: nth($val, 2),
      right: nth($val, 2),
      bottom: nth($val, 3),
    ), $side);
  }
  @if $length == 4 {
    @return map-get((
      top: nth($val, 1),
      right: nth($val, 2),
      bottom: nth($val, 3),
      left: nth($val, 4),
    ), $side);
  }
}

/// Removes the unit (e.g. px, em, rem) from a value, returning the number only.
///
/// @param {Number} $num - Number to strip unit from.
///
/// @returns {Number} The same number, sans unit.
@function strip-unit($num) {
  @return math.div($num, ($num * 0 + 1));
}

/// Converts one or more pixel values into matching rem values.
///
/// @param {Number|List} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.
/// @param {Number} $base [null] - The base value to use when calculating the `rem`.
///
/// @returns {List} A list of converted values.
@function rem($values, $base: null) {
  $rem-values: ();
  $count: length($values);

  // If no base is defined, defer to the global font size
  @if $base == null {
    $base: 100%;
  }

  // If the base font size is a %, then multiply it by 16px
  // This is because 100% font size = 16px in most all browsers
  @if unit($base) == '%' {
    $base: calc($base / 100%) * 16px;
  }

  // Using rem as base allows correct scaling
  @if unit($base) == 'rem' {
    $base: strip-unit($base) * 16px;
  }

  @if $count == 1 {
    @return to-rem($values, $base);
  }

  @for $i from 1 through $count {
    $rem-values: append($rem-values, to-rem(nth($values, $i), $base));
  }

  @return $rem-values;
}

/// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `100%` variable.
/// @access private
///
/// @param {Number} $value - Pixel value to convert.
/// @param {Number} $base [null] - Base for pixel conversion.
///
/// @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.
@function to-rem($value, $base: null) {
  // Check if the value is a number
  @if type-of($value) != 'number' {
    @warn 'rem(): ' + inspect($value) + ' is not a number.';
    @return $value;
  }

  // Transform em into rem if someone hands over 'em's
  @if unit($value) == 'em' {
    $value: strip-unit($value) * 1rem;
  }

  // Calculate rem if units for $value is not rem or em
  @if unit($value) != 'rem' {
    $value: calc(strip-unit($value) / strip-unit($base)) * 1rem;
  }

  // Turn 0rem into 0
  @if $value == 0rem {
    $value: 0;
  }

  @return $value;
}


// Converts a unitless, pixel, or rem value to em, for use in breakpoints.
@function em($values, $base: null) {
  $em-values: ();
  $count: length($values);

  // If no base is defined, defer to the global font size
  @if $base == null {
    $base: 100%;
  }

  // If the base font size is a %, then multiply it by 16px
  // This is because 100% font size = 16px in most all browsers
  @if unit($base) == '%' {
    $base: calc($base / 100%) * 16px;
  }

  // Using rem as base allows correct scaling
  @if unit($base) == 'rem' {
    $base: strip-unit($base) * 16px;
  }

  @if $count == 1 {
    @return to-em($values, $base);
  }

  @for $i from 1 through $count {
    $em-values: append($em-values, to-em(nth($values, $i), $base));
  }

  @return $em-values;


  // Pixel and unitless values are converted to rems
  @if unit($value) == 'px' or unitless($value) {
    $value: em($value, $base: 16px);
  }

  // Then the value is converted to ems
  @return strip-unit($value) * 1em;
}

@function to-em($value, $base: null) {
  // Check if the value is a number
  @if type-of($value) != 'number' {
    @warn 'em(): ' + inspect($value) + ' is not a number.';
    @return $value;
  }

  // Transform em into rem if someone hands over 'em's
  @if unit($value) == 'rem' {
    $value: strip-unit($value) * 1em;
  }

  // Calculate rem if units for $value is not rem or em
  @if unit($value) != 'em' {
    $value: calc(strip-unit($value) / strip-unit($base)) * 1em;
  }

  // Turn 0rem into 0
  @if $value == 0em {
    $value: 0;
  }

  @return $value;
}

/// Converts a pixel, percentage, rem or em value to a unitless value based on a given font size. Ideal for working out unitless line heights.
///
/// @param {Number} $value - Value to convert to a unitless line height
/// @param {Number} $base - The font size to use to work out the line height - defaults to 100%
///
/// @return {Number} - Unitless number
@function unitless-calc($value, $base: null) {

  // If no base is defined, defer to the global font size
  @if $base == null {
    $base: 100%;
  }

  // First, lets convert our $base to pixels

  // If the base font size is a %, then multiply it by 16px
  @if unit($base) == '%' {
    $base: calc($base / 100%) * 16px;
  }

  @if unit($base) == 'rem' {
    $base: strip-unit($base) * 16px;
  }

  @if unit($base) == 'em' {
    $base: strip-unit($base) * 16px;
  }

  // Now let's convert our value to pixels too
  @if unit($value) == '%' {
    $value: calc($value / 100%) * $base;
  }

  @if unit($value) == 'rem' {
    $value: strip-unit($value) * $base;
  }

  @if unit($value) == 'em' {
    $value: strip-unit($value) * $base;
  }

  // 'px'
  @if unit($value) == 'px' {
    @return calc(strip-unit($value) / strip-unit($base));
  }

  @return $value;
}

/// Calculates the veritcal of an element based on font size, line height and height.  Ideal for input, select, button heights and min-heights.
///
/// @param {Number} $height - The element height - defaults to 40px
/// @param {Number} $font-size - The font size - defaults to $font-size-base
/// @param {Number} $line-height - The line height - defaults to $line-height-base
/// @param {Number} $border-width - The border width - 0
/// @param {Number} $horizontal-padding - vertical padding - defaults to 0
///
/// @return {em} - Em value
@function vertical-padding(
  $height: 40px,
  $font-size: $font-size-base,
  $line-height: $line-height-base,
  $border-width: 0,
  $horizontal-padding: 0,
){
  $font-size: em($font-size);
  $line-height: unitless-calc($line-height);
  $horizontal-padding: em($horizontal-padding);
  $border-width: em(get-side($border-width, 'top')) + em(get-side($border-width, 'bottom'));
  $height: em($height) - ($font-size * $line-height) - $border-width - 1em;

  @if $height < 0 {
    $height: 0;
  }
  @return $height $horizontal-padding;
}

